version: "3.8"

services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  flink-jobmanager:
    image: flink:latest
    container_name: flink-jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    volumes:
      - ./flink_data:/flink/data
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  flink-taskmanager:
    image: flink:latest
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
    volumes:
      - ./flink_data:/flink/data
    healthcheck:
      test: ["CMD-SHELL", "nc -z flink-jobmanager 6123 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  flink-sql-client:
    image: flink:latest
    container_name: flink-sql-client
    depends_on:
      - flink-jobmanager
    command: bin/sql-client.sh
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        rest.address: flink-jobmanager
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://flink-jobmanager:8081 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    container_name: ksqldb-server
    ports:
      - "8088:8088"
    depends_on:
      - kafka
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/info || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    stdin_open: true
    tty: true

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: myorg
      DOCKER_INFLUXDB_INIT_BUCKET: mybucket
      DOCKER_INFLUXDB_INIT_RETENTION: 1w
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  confluent-control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    ports:
      - "9021:9021"
    depends_on:
      - kafka
      - ksqldb-server
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_KSQL_URL: 'http://ksqldb-server:8088'
      CONTROL_CENTER_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: 'PLAINTEXT'
      CONTROL_CENTER_CONNECT_CLUSTER: 'http://localhost:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: 'http://ksqldb-server:8088'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9021 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5